// Code generated by MockGen. DO NOT EDIT.
// Source: 1d1go/boj/p1k/p1000 (interfaces: InOut)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInOut is a mock of InOut interface.
type MockInOut struct {
	ctrl     *gomock.Controller
	recorder *MockInOutMockRecorder
}

// MockInOutMockRecorder is the mock recorder for MockInOut.
type MockInOutMockRecorder struct {
	mock *MockInOut
}

// NewMockInOut creates a new mock instance.
func NewMockInOut(ctrl *gomock.Controller) *MockInOut {
	mock := &MockInOut{ctrl: ctrl}
	mock.recorder = &MockInOutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInOut) EXPECT() *MockInOutMockRecorder {
	return m.recorder
}

// Println mocks base method.
func (m *MockInOut) Println(arg0 ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Println", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Println indicates an expected call of Println.
func (mr *MockInOutMockRecorder) Println(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockInOut)(nil).Println), arg0...)
}

// Scan mocks base method.
func (m *MockInOut) Scan(arg0 ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockInOutMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockInOut)(nil).Scan), arg0...)
}
